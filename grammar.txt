PROGRAM -> STATEMENT | FUNCLIST | &
FUNCLIST -> FUNCDEF FUNCLIST'
FUNCLIST' -> FUNCLIST | &
FUNCDEF -> def ident(PARAMLIST){STATELIST}
TYPE -> int | float | string
PARAMLIST -> TYPE identPARAMLIST' | &
PARAMLIST' -> , PARAMLIST | &
STATEMENT -> VARDECL; | ATRIBSTAT; | PRINTSTAT; | READSTAT; | RETURNSTAT; | IFSTAT | FORSTAT | {STATELIST} | break; | ;
VARDECL -> TYPE ident | ARRAYVARDECL
ARRAYVARDECL -> TYPE ident INT_LIST
INT_LIST -> [int_constant]INT_LIST' | &
INT_LIST' -> INT_LIST
ATRIBSTAT -> LVALUE = ATRIBSTAT'
ATRIBSTAT' -> EXPRESSION | ALLOCEXPRESSION | FUNCCALL
FUNCCALL -> call ident(PARAMLISTCALL)
PARAMLISTCALL -> identPARAMLISTCALL' | &
PARAMLISTCALL' -> , PARAMLISTCALL | &
PRINTSTAT -> print EXPRESSION
READSTAT -> read LVALUE
RETURNSTAT -> return ident
IFSTAT -> if ( EXPRESSION ) { STATEMENT } ELSESTAT
ELSESTAT -> else { STATEMENT } | &
FORSTAT -> for(ATRIBSTAT; EXPRESSION; ATRIBSTAT) STATEMENT
STATELIST -> STATEMENT STATELIST'
STATELIST' -> STATELIST | &
ALLOCEXPRESSION -> new TYPE NUM_LIST
NUM_LIST -> [NUMEXPRESSION]NUM_LIST'
NUM_LIST' -> NUM_LIST | &
RELOP -> < | > | <= | >= | == | !=
EXPRESSION -> NUMEXPRESSION EXPRESSION'
EXPRESSION' -> RELOP NUMEXPRESSION | &
SIGNAL -> + | -
NUMEXPRESSION ->  TERM NUMEXPRESSION' 
NUMEXPRESSION' -> TERM_REC
TERM_REC -> SIGNAL TERM TERM_REC' | &
TERM_REC' -> TERM_REC
OPERATOR -> * | / | %
TERM -> UNARYEXPR TERM'
TERM' -> UNARYEXPR_REC
UNARYEXPR_REC -> OPERATOR UNARYEXPR UNARYEXPR_REC' | &
UNARYEXPR_REC' -> UNARYEXPR_REC
UNARYEXPR -> SIGNAL FACTOR | FACTOR
FACTOR -> int_constant | float_constant | string_constant | null | LVALUE | (NUMEXPRESSION)
LVALUE -> ident LVALUE'
LVALUE' -> NUMEXPRESSION_REC
NUMEXPRESSION_REC -> [NUMEXPRESSION] NUMEXPRESSION_REC' | &
NUMEXPRESSION_REC' -> NUMEXPRESSION_REC
