PROGRAM -> STATEMENT | FUNCLIST | &
FUNCLIST -> FUNCDEF FUNCLIST'
FUNCLIST' -> FUNCLIST | &
FUNCDEF -> def ident(PARAMLIST){STATELIST}
TYPE -> int | float | string | bool
PARAMLIST -> TYPE identPARAMLIST' | &
PARAMLIST' -> , PARAMLIST | &
STATEMENT -> VARDECL; | ATRIBSTAT; | PRINSTAT; | READSTAT; | RETURNSTAT; | IFSTAT | FORSTAT | {STATELIST} | break; | ;
VARDECL -> TYPE ident VARDECL' | tTYPE ident TUPLE
VARDECL' -> INT_LIST | &
INT_LIST -> [int_constant]INT_LIST | [int_constant] | &
ATRIBSTAT -> LVALUE = EXPRESSION | LVALUE = ALLOCEXPRESSION | LVALUE = FUNCCALL
FUNCCALL -> ident(PARAMLISTCALL)
PARAMLISTCALL -> ident, PARAMLISTCALL | ident | &
PRINTSTAT -> print EXPRESSION
READSTAT -> read LVALUE
RETURNSTAT -> return ident
IFSTAT -> if ( EXPRESSION ) STATEMENT else STATEMENT | if ( EXPRESSION ) STATEMENT
FORSTAT -> for(ATRIBSTAT; EXPRESSION; ATRBISTAT) STATEMENT
STATELIST -> STATEMENT | STATEMENT STATELIST
ALLOCEXPRESSION -> new TYPE NUM_LIST
NUM_LIST -> [NUMEXPRESSION] | [NUMEXPRESSION]NUM_LIST
RELOP -> < | > | <= | >= | == | !=
EXPRESSION -> NUMEXPRESSION RELOP NUMEXPRESSION | NUMEXPRESSION | BOLLEXPRESSION
SIGNAL -> + | -
NUMEXPRESSION ->  TERM | TERM TERM_REC 
TERM_REC -> SIGNAL TERM TERM_REC | SIGNAL TERM | &
OPERATOR -> * | / | %
TERM -> UNARYEXPR UNARYEXPR_REC | UNARYEXPR
UNARYEXPR_REC -> OPERATOR UNARYEXPR UNARYEXPR_REC | OPERATOR UNARYEXPR | &
UNARYEXPR -> SIGNAL FACTOR | FACTOR
FACTOR -> int_constant | float_constant | string_constant | null | LVALUE | (NUMEXPRESSION)
LVALUE -> ident NUMEXPRESSION_REC | ident
NUMEXPRESSION_REC -> [NUMEXPRESSION] NUMEXPRESSION_REC | [NUMEXPRESSION] | &
TUPLE -> [int_constant] TUPLE | [int_constant]
BOOLEXPRESSION -> (BOLLEXPRESSION) BOOLEXPRESSION_OP BOOLEXPRESSION'  | not (BOOLEXPRESSION) BOOLEXPRESSION' | NUMEXPRESSION BOOLEXPRESSION'
BOOLEXPRESSION' -> BOLLEXPRESSION_OP BOOLEXPRESSION' | &
BOOLEXPRESSION_OP -> and BOOLEXPRESSION | or BOOLEXPRESSION | &
