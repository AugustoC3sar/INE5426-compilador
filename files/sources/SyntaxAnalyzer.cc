#include "SyntaxAnalyzer.h"

SyntaxAnalyzer::SyntaxAnalyzer()
{
  stack = {"$", "PROGRAM"};

  productions = {
      {0, "PROGRAM", {"STATEMENT"}},
      {1, "PROGRAM", {"FUNCLIST"}},
      {2, "PROGRAM", {"&"}},
      {3, "FUNCLIST", {"FUNDEF", "FUNCLIST'"}},
      {4, "FUNCLIST'", {"FUNCLIST"}},
      {5, "FUNCLIST'", {"&"}},
      {6, "FUNCDEF", {"def", "ident", "(", "PARAMLIST", ")", "{", "STATELIST", "}"}},
      {7, "TYPE", {"int"}},
      {8, "TYPE", {"float"}},
      {9, "TYPE", {"string"}},
      {10, "PARAMLIST", {"TYPE", "ident", "PARAMLIST'"}},
      {11, "PARAMLIST", {"&"}},
      {12, "PARAMLIST'", {",", "PARAMLIST"}},
      {13, "PARAMLIST'", {"&"}},
      {14, "STATEMENT", {"VARDECL", ";"}},
      {15, "STATEMENT", {"ATRIBSTAT", ";"}},
      {16, "STATEMENT", {"PRINTSTAT", ";"}},
      {17, "STATEMENT", {"READSTAT", ";"}},
      {18, "STATEMENT", {"RETURNSTAT", ";"}},
      {19, "STATEMENT", {"IFSTAT"}},
      {20, "STATEMENT", {"FORSTAT"}},
      {21, "STATEMENT", {"{", "STATELIST", "}"}},
      {22, "STATEMENT", {"break", ";"}},
      {23, "STATEMENT", {";"}},
      {24, "VARDECL", {"TYPE", "ident", "ARRAYVARDECL"}},
      {25, "ARRAYVARDECL", {"[", "int_constant", "]", "ARRAYVARDECL"}},
      {26, "ARRAYVARDECL", {"&"}},
      {27, "ATRIBSTAT", {"LVALUE", "=", "ATRIBSTAT'"}},
      {28, "ATRIBSTAT'", {"EXPRESSION"}},
      {29, "ATRIBSTAT'", {"ALLOCEXPRESSION"}},
      {30, "ATRIBSTAT'", {"FUNCCALL"}},
      {31, "FUNCCALL", {"call", "ident", "(", "PARAMLISTCALL", ")"}},
      {32, "PARAMLISTCALL", {"ident", "PARAMLISTCALL'"}},
      {33, "PARAMLISTCALL", {"&"}},
      {34, "PARAMLISTCALL'", {",", "PARAMLISTCALL"}},
      {35, "PARAMLISTCALL'", {"&"}},
      {36, "PRINTSTAT", {"print", "EXPRESSION"}},
      {37, "READSTAT", {"read", "LVALUE"}},
      {38, "RETURNSTAT", {"return", "ident"}},
      {39, "IFSTAT", {"if", "(", "EXPRESSION", ")", "{", "STATEMENT", "}", "ELSESTAT"}},
      {40, "ELSESTAT", {"else", "{", "STATEMENT", "}"}},
      {41, "ELSESTAT", {"&"}},
      {42, "FORSTAT", {"if", "(", "ATRIBSTAT", ";", "EXPRESSION", ";", "ATRIBSTAT", ")", "STATEMENT"}},
      {43, "STATELIST", {"STATEMENT", "STATELIST'"}},
      {44, "STATELIST'", {"STATELIST"}},
      {45, "STATELIST'", {"&"}},
      {46, "ALLOCEXPRESSION", {"new", "TYPE", "NUM_LIST"}},
      {47, "NUM_LIST", {"[", "NUMEXPRESSION", "]", "NUM_LIST'"}},
      {48, "NUM_LIST'", {"NUM_LIST"}},
      {49, "NUM_LIST'", {"&"}},
      {50, "RELOP", {"<", ">", "<=", ">=", "==", "!="}},
      {51, "EXPRESSION", {"NUMEXPRESSION", "EXPRESSION'"}},
      {52, "EXPRESSION'", {"RELOP", "NUMEXPRESSION"}},
      {53, "EXPRESSION'", {"&"}},
      {54, "SIGNAL", {"+", "-"}},
      {55, "NUMEXPRESSION", {"TERM", "NUMEXPRESSION'"}},
      {56, "NUMEXPRESSION'", {"TERM_REC"}},
      {57, "OPERATOR", {"*", "/", "%"}},
      {58, "TERM", {"UNARYEXPR", "TERM'"}},
      {59, "TERM'", {"UNARYEXPR_REC"}},
      {60, "UNARYEXPR_REC", {"OPERATOR", "UNARYEXPR", "UNARYEXPR_REC'"}},
      {61, "UNARYEXPR_REC", {"&"}},
      {62, "UNARYEXPR_REC'", {"UNARYEXPR_REC"}},
      {63, "UNARYEXPR", {"SIGNAL", "FACTOR"}},
      {64, "UNARYEXPR", {"FACTOR"}},
      {65, "FACTOR", {"int_constant"}},
      {66, "FACTOR", {"float_constant"}},
      {67, "FACTOR", {"string_constant"}},
      {68, "FACTOR", {"null"}},
      {69, "FACTOR", {"LVALUE"}},
      {70, "FACTOR", {"(", "NUMEXPRESSION", ")"}},
      {71, "LVALUE", {"ident", "LVALUE'"}},
      {72, "LVALUE'", {"NUMEXPRESSION_REC"}},
      {73, "NUMEXPRESSION_REC", {"[", "NUMEXPRESSION", "]", "NUMEXPRESSION_REC'"}},
      {74, "NUMEXPRESSION_REC", {"&"}},
      {75, "NUMEXPRESSION_REC'", {"NUMEXPRESSION_REC"}},
  };

  parseTable = {
      {"PROGRAM", {
                      {"$", 2},
                      {"def", 1},
                      {"ident", 0},
                      {"{", 0},
                      {"int", 0},
                      {"float", 0},
                      {"string", 0},
                      {";", 0},
                      {"break", 0},
                      {"print", 0},
                      {"read", 0},
                      {"return", 0},
                      {"if", 0},
                      {"for", 0},
                  }},
      {"FUNCLIST", {
                       {"def", 3},
                   }},
      {"FUNCLIST'", {
                        {"$", 6},
                        {"def", 5},
                    }},
      {"FUNCDEF", {
                      {"def", 7},
                  }},
      {"TYPE", {
                   {"int", 7},
                   {"float", 8},
                   {"string", 9},
               }},
      {"PARAMLIST", {{")", 11}, {"int", 10}, {"int", 10}, {"string", 10}}},
      {"PARAMLIST'", {
                         {")", 13},
                         {",", 12},
                     }},
      {"STATEMENT", {
                        {"ident", 15},
                        {"{", 21},
                        {"int", 14},
                        {"float", 14},
                        {"string", 14},
                        {";", 23},
                        {"break", 22},
                        {"print", 16},
                        {"read", 17},
                        {"return", 18},
                        {"if", 19},
                        {"for", 20},
                    }},
  };
}
